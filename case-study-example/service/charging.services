import datatypes from "../data/charging.data" as chargingData
import datatypes from "../data/common.data" as commonData
import microservices from "infrastructure.services" as infrastructureServices

/*
 * Import of a technology model, which defines service-related technology. Please note that this is
 * part of our current work in implementing technology models to separate the service functionality
 * from the service technology concern and make technology definitions reusable across microservices
 * and operation nodes. The imported model is assigned to Microservice instances with the
 * "@technology" annotation.
 */
import technology from "../technology/charging.technology" as chargingTech

// The ChargingStation microservice provides functions regarding the usage of the charging points
@technology(chargingTech)
@endpoints(chargingTech::_protocols.rest : "/charging";)
functional microservice de.fhdo.ChargingService version v01 {
	 
	/* 
	 * The infrastructural microservices are required for
	 * the provisioning of cross-cutting concerns, e.g., scalability and reliability.
	 */  
	required microservices {
		infrastructureServices::v01.de.fhdo.APIGateways,
		infrastructureServices::v01.de.fhdo.DiscoveryService,
		infrastructureServices::v01.de.fhdo.SecurityService
	}
	
	// Interface for the Management of charging spaces
	@endpoints(chargingTech::_protocols.rest : "/management";)
	interface ChargingManagamentInterface{
		
		// Create a charging space
		@endpoints(chargingTech::_protocols.rest : "/create";)
		public createChargingSpace ( sync in chargingSpace: chargingData::v01.ChargingInfrastructure.ChargingSpace);
		
		// Read a charging space
		@endpoints(chargingTech::_protocols.rest : "/read/{id}";)
		public readChargingSpace(sync in id: string,
			sync out chargingSpace : chargingData::v01.ChargingInfrastructure.ChargingSpace
		);
		
		// Update a charging space
		@endpoints(chargingTech::_protocols.rest : "/update/{id}";)
		public updateChargingSpace (sync inout chargingSpaceIn : chargingData::v01.ChargingInfrastructure.ChargingSpace);
		
		// Delete a charging space
		@endpoints(chargingTech::_protocols.rest : "/delete/{id}";)
		public deleteChargingSpace (sync in delete : int,
			sync out chargingSpace : chargingData::v01.ChargingInfrastructure.ChargingSpace
		);
		
		// Share a charging space
		@endpoints(chargingTech::_protocols.rest : "/share/{id}";)
		public shareChargingSpace (sync in id : int, 
			sync out response : boolean
		);
	}
	
	// Interface for the usage of charing station
	@endpoints(chargingTech::_protocols.rest : "/function/";)
	interface CargingFunction {
		
		// Find a charging space in a specific area
		@endpoints(chargingTech::_protocols.rest : "/find/{address}";)
		public findChargingSpace(sync in location : commonData::a01.common.Address,
			sync out chargingSpace : chargingData::v01.ChargingInfrastructure.ChargingSpace
		);
		
		// Query the actual status of a specific charging space
		@endpoints(chargingTech::_protocols.rest : "/query/{chargingSpaceId}";)
		public queryCharingSpace(sync in chargingSpaceId : string,
			sync out status : boolean 
		);
		
		// Allocate a specific charging space
		@endpoints(chargingTech::_protocols.rest : "/allocate/{chargingSpaceId}";)
		public allocateChargingSpace(sync in chargingSpaceId : int,
			sync out chargingSpace : chargingData::v01.ChargingInfrastructure.ChargingSpace
		);
	}
	
	
}
