import datatypes from "../data/payment.data" as paymentData

/*
 * Import of a technology model, which defines service-related technology. Please note that this is
 * part of our current work in implementing technology models to separate the service functionality
 * from the service technology concern and make technology definitions reusable across microservices
 * and operation nodes. The imported model is assigned to Microservice instances with the
 * "@technology" annotation.
 */
import technology from "../technology/go.technology" as go
import technology from "../technology/shared.technology" as shared

import microservices from "charging.services" as chargingServices

/*
 * Model for the PaymentService
 * The protocols, listed in Listing 2 of the book chapter, is defined in the shared.technology file
 */ 
@technology(go)
@technology(shared)
@endpoints(shared::_protocols.rest : "/payment";)
functional microservice de.fhdo.PaymentService {
	// The Invoice interface offers functions for the payment
	@endpoints(shared::_protocols.rest : "/invoice";)
	public interface InvoiceInterface {
		// Get an invoice
		@endpoints(shared::_protocols.rest : "/read/{invoiceNumber}";)
		getInvoice(sync in invoiceNumber : int,
			sync out invoice : paymentData::v01.Payment.Invoice
		);
		
		// Create an invoice
		@endpoints(shared::_protocols.rest : "/create";)
		createInvoice(sync in create : paymentData::v01.Payment.Invoice);

		// Pay an invoice
		@endpoints(shared::_protocols.rest : "/pay";)
		payInvoice(sync in invoiceNumber : int,
			sync in paymentAmount : float,
			sync out conformation : string
		);

		// Get a receipt for a paid invoice
		@endpoints(shared::_protocols.rest : "/receipt/{invoiceNumber}";)
		getReceipt (sync in invoiceNumber : int,
			sync out receipt : paymentData::v01.Payment.Receipt
		);
	}
}

